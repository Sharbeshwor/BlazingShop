@page "/product-create"
@inject IProductService productService
@inject ICategoryService CategoryService

<h3>Create a New Blog Post</h3>

<EditForm Model="@newProduct" OnValidSubmit="CreatenewProduct">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="newProduct.Title" class="form-control" />
        <ValidationMessage For="@(() => newProduct.Title)" />
    </div>
    <div class="form-control-file">
        <label for="image">Image</label>
        <InputText id="image" @bind-Value="newProduct.Image" class="form-control" />
    </div>
    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newProduct.Description" class="form-control" />
    </div>
    @if (CategoryService.Categories != null && CategoryService.Categories.Count > 1)
        {
            <div class="form-group">
                <label for="categoryId">Category</label>
                <select id="categoryId" class="form-control" @bind="newProduct.CategoryId">
                    @foreach (var variant in CategoryService.Categories)
                    {
                        <option value="@variant.Id">@variant.Name</option>
                    }
                </select>
            </div>
        }
    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="newProduct.DateCreated" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
    <ValidationSummary />
</EditForm>

@code {
    Product newProduct = new Product();

    async Task CreatenewProduct()
    {
        newProduct.IsPublic = true;
        newProduct.IsDeleted = false;
        newProduct.Views = 0;
        var result = await productService.addProduct(newProduct);
        newProduct = new Product();
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 1060, 1060);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newProduct.Image = imageData;
    }
    protected override async Task OnInitializedAsync()
    {
        if(CategoryService.Categories== null && CategoryService.Categories.Count > 1 )
        await CategoryService.LoadCategories();
    }
}
